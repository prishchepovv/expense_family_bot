import sqlite3
from datetime import datetime, date, timedelta
import logging

logger = logging.getLogger(__name__)

class Database:
    def __init__(self, db_name='expenses.db'):
        self.db_name = db_name
        self.init_db()

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                registered_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS categories (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE NOT NULL,
                emoji TEXT
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS expenses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                amount REAL NOT NULL,
                category TEXT NOT NULL,
                description TEXT,
                date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        default_categories = [
            ('üçî –ï–¥–∞', 'üçî'),
            ('‚õΩÔ∏è –ë–µ–Ω–∑–∏–Ω', '‚õΩÔ∏è'),
            ('üè† –î–æ–º', 'üè†'),
            ('üëó –û–¥–µ–∂–¥–∞', 'üëó'),
            ('üíä –ó–¥–æ—Ä–æ–≤—å–µ', 'üíä'),
            ('üç∫ –ü–æ—Å–∏–¥–µ–ª–∫–∏', 'üç∫'),
            ('üì± –°–≤—è–∑—å', 'üì±'),
            ('üí° –ö–æ–º–º—É–Ω–∞–ª–∫–∞', 'üí°'),
            ('üéÅ –ü–æ–¥–∞—Ä–∫–∏', 'üéÅ'),
            ('üí∏ –ö—Ä–µ–¥–∏—Ç—ã', 'üí∏'),
            ('üö¨ –ö—É—Ä–µ–Ω–∏–µ', 'üö¨'),
            ('üêà –ñ–∏–≤–æ—Ç–Ω—ã–µ', 'üêà'),
        ]
        
        cursor.executemany('''
            INSERT OR IGNORE INTO categories (name, emoji) VALUES (?, ?)
        ''', default_categories)
        
        conn.commit()
        conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def add_user(self, user_id, username, first_name):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, username, first_name) 
            VALUES (?, ?, ?)
        ''', (user_id, username, first_name))
        
        conn.commit()
        conn.close()

    def add_expense(self, user_id, amount, category, description=""):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO expenses (user_id, amount, category, description, date)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, amount, category, description, datetime.now()))
        
        conn.commit()
        conn.close()

    def get_categories(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('SELECT name, emoji FROM categories')
        categories = cursor.fetchall()
        conn.close()
        
        return [f"{emoji} {name}" for name, emoji in categories]

    def get_today_expenses(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT category, SUM(amount) 
            FROM expenses 
            WHERE user_id = ? AND date(date) = date('now')
            GROUP BY category
        ''', (user_id,))
        
        expenses = cursor.fetchall()
        conn.close()
        return expenses

    def get_week_expenses(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT category, SUM(amount) 
            FROM expenses 
            WHERE user_id = ? AND date(date) >= date('now', 'weekday 0', '-7 days')
            GROUP BY category
        ''', (user_id,))
        
        expenses = cursor.fetchall()
        conn.close()
        return expenses

    def get_month_expenses(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT category, SUM(amount) 
            FROM expenses 
            WHERE user_id = ? AND strftime('%Y-%m', date) = strftime('%Y-%m', 'now')
            GROUP BY category
        ''', (user_id,))
        
        expenses = cursor.fetchall()
        conn.close()
        return expenses

    def get_total_today(self, user_id):
        """–û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT SUM(amount) 
            FROM expenses 
            WHERE user_id = ? AND date(date) = date('now')
        ''', (user_id,))
        
        total = cursor.fetchone()[0] or 0
        conn.close()
        return total

    def get_total_week(self, user_id):
        """–û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT SUM(amount) 
            FROM expenses 
            WHERE user_id = ? AND date(date) >= date('now', 'weekday 0', '-7 days')
        ''', (user_id,))
        
        total = cursor.fetchone()[0] or 0
        conn.close()
        return total

    def get_total_month(self, user_id):
        """–û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT SUM(amount) 
            FROM expenses 
            WHERE user_id = ? AND strftime('%Y-%m', date) = strftime('%Y-%m', 'now')
        ''', (user_id,))
        
        total = cursor.fetchone()[0] or 0
        conn.close()
        return total

    # –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–ò

    def get_all_expenses(self, user_id, limit=50):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT category, amount, description, date 
            FROM expenses 
            WHERE user_id = ? 
            ORDER BY date DESC 
            LIMIT ?
        ''', (user_id, limit))
        
        expenses = cursor.fetchall()
        conn.close()
        return expenses

    def get_expenses_by_date_range(self, user_id, start_date, end_date):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT category, amount, description, date 
            FROM expenses 
            WHERE user_id = ? AND date(date) BETWEEN ? AND ?
            ORDER BY date DESC
        ''', (user_id, start_date, end_date))
        
        expenses = cursor.fetchall()
        conn.close()
        return expenses

    def get_expenses_by_category(self, user_id, category):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
        clean_category = ' '.join(category.split()[1:]) if ' ' in category else category
        
        cursor.execute('''
            SELECT category, amount, description, date 
            FROM expenses 
            WHERE user_id = ? AND category = ?
            ORDER BY date DESC
        ''', (user_id, clean_category))
        
        expenses = cursor.fetchall()
        conn.close()
        return expenses

    def get_largest_expenses(self, user_id, limit=10):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–º—ã—Ö –∫—Ä—É–ø–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT category, amount, description, date 
            FROM expenses 
            WHERE user_id = ? 
            ORDER BY amount DESC 
            LIMIT ?
        ''', (user_id, limit))
        
        expenses = cursor.fetchall()
        conn.close()
        return expenses