import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    filters, CallbackContext, ConversationHandler
)
from database import Database
from keyboards import (
    get_main_keyboard, get_categories_keyboard, 
    get_statistics_keyboard, get_back_keyboard,
    get_settings_keyboard, get_detailed_stats_keyboard,  # –î–æ–±–∞–≤–ª–µ–Ω–æ
    get_categories_for_filter  # –î–æ–±–∞–≤–ª–µ–Ω–æ
)
from config import BOT_TOKEN
from datetime import datetime  # –î–æ–±–∞–≤–ª–µ–Ω–æ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
AMOUNT, CATEGORY, DESCRIPTION = range(3)
# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
DETAILED_STATS, DATE_RANGE, CATEGORY_FILTER = range(3, 6)

class ExpenseBot:
    def __init__(self, token):
        self.application = Application.builder().token(token).build()
        self.db = Database()
        self.setup_handlers()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help_command))
        
        # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
        conv_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("^üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥$"), self.start_add_expense)],
            states={
                AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_amount)],
                CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_category)],
                DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_description)],
            },
            fallbacks=[MessageHandler(filters.Regex("^‚Ü©Ô∏è –ù–∞–∑–∞–¥$"), self.cancel)],
        )
        self.application.add_handler(conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.Regex("^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), self.show_statistics_menu))
        self.application.add_handler(MessageHandler(filters.Regex("^üìÖ –°–µ–≥–æ–¥–Ω—è$"), self.show_today_stats))
        self.application.add_handler(MessageHandler(filters.Regex("^üìÜ –ù–µ–¥–µ–ª—è$"), self.show_week_stats))
        self.application.add_handler(MessageHandler(filters.Regex("^üìà –ú–µ—Å—è—Ü$"), self.show_month_stats))
        self.application.add_handler(MessageHandler(filters.Regex("^‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏$"), self.show_settings))
        self.application.add_handler(MessageHandler(filters.Regex("^‚ÑπÔ∏è –ü–æ–º–æ—â—å$"), self.help_command))
        self.application.add_handler(MessageHandler(filters.Regex("^‚Ü©Ô∏è –ù–∞–∑–∞–¥$"), self.back_to_main))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.application.add_handler(MessageHandler(filters.Regex("^üìä –°–µ–≥–æ–¥–Ω—è$"), self.show_today_detailed))
        self.application.add_handler(MessageHandler(filters.Regex("^üìÖ –ù–µ–¥–µ–ª—è$"), self.show_week_detailed))
        self.application.add_handler(MessageHandler(filters.Regex("^üìà –ú–µ—Å—è—Ü$"), self.show_month_detailed))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
        self.application.add_handler(MessageHandler(filters.Regex("^üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è$"), self.show_detailed_stats_menu))
        self.application.add_handler(MessageHandler(filters.Regex("^üìã –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã$"), self.show_all_expenses))
        self.application.add_handler(MessageHandler(filters.Regex("^üìÖ –ü–æ –¥–∞—Ç–µ$"), self.ask_date_range))
        self.application.add_handler(MessageHandler(filters.Regex("^üìÅ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏$"), self.ask_category_filter))
        self.application.add_handler(MessageHandler(filters.Regex("^üí∞ –°–∞–º—ã–µ –∫—Ä—É–ø–Ω—ã–µ$"), self.show_largest_expenses))
        self.application.add_handler(MessageHandler(filters.Regex("^‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É$"), self.back_to_statistics))
        
        # ConversationHandler –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ
        date_conv_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("^üìÖ –ü–æ –¥–∞—Ç–µ$"), self.ask_date_range)],
            states={
                DATE_RANGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.process_date_range)],
            },
            fallbacks=[MessageHandler(filters.Regex("^‚Ü©Ô∏è –ù–∞–∑–∞–¥$"), self.cancel_detailed_stats)],
        )
        self.application.add_handler(date_conv_handler)
        
        # ConversationHandler –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_conv_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("^üìÅ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏$"), self.ask_category_filter)],
            states={
                CATEGORY_FILTER: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.process_category_filter)],
            },
            fallbacks=[MessageHandler(filters.Regex("^‚Ü©Ô∏è –ù–∞–∑–∞–¥$"), self.cancel_detailed_stats)],
        )
        self.application.add_handler(category_conv_handler)

    async def start(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        self.db.add_user(user.id, user.username, user.first_name)
        
        welcome_text = f"""
üëã –í–∞—Å–∞–ø, {user.first_name}!

–Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ç–≤–æ–∏—Ö –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–∞—Ç...

üìä **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üí∏ –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—é –∏ –º–µ—Å—è—Ü
‚Ä¢ üìà –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
‚Ä¢ üë• –£—á–µ—Ç –¥–ª—è –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–ù–∞–∂–º–∏—Ç–µ ¬´üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥¬ª —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!
        """
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=get_main_keyboard(),
            parse_mode='Markdown'
        )

    async def start_add_expense(self, update: Update, context: CallbackContext):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞"""
        await update.message.reply_text(
            "üíµ –í–≤–µ–¥–∏ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:",
            reply_markup=get_back_keyboard()
        )
        return AMOUNT

    async def get_amount(self, update: Update, context: CallbackContext):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–∞"""
        try:
            amount = float(update.message.text.replace(',', '.'))
            if amount <= 0:
                await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π, —Ç—É–ø—ã—Ä–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
                return AMOUNT
            
            context.user_data['amount'] = amount
            await update.message.reply_text(
                "üìÅ –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=get_categories_keyboard()
            )
            return CATEGORY
            
        except ValueError:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Ä–∞—Å–∫–∏–Ω—å –∏–∑–≤–∏–ª–∏–Ω–∞–º–∏ –∏ –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 150.50):")
            return AMOUNT

    async def get_category(self, update: Update, context: CallbackContext):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        category = update.message.text
        if category == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
            await update.message.reply_text(
                "üíµ –í–≤–µ–¥–∏ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:",
                reply_markup=get_back_keyboard()
            )
            return AMOUNT
        
        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        clean_category = ' '.join(category.split()[1:]) if ' ' in category else category
        
        context.user_data['category'] = clean_category
        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")], [KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)
        )
        return DESCRIPTION

    async def get_description(self, update: Update, context: CallbackContext):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
        description = update.message.text
        
        if description == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
            await update.message.reply_text(
                "üìÅ –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=get_categories_keyboard()
            )
            return CATEGORY
        
        if description == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            description = ""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Ö–æ–¥ –≤ –±–∞–∑—É
        user_id = update.effective_user.id
        amount = context.user_data['amount']
        category = context.user_data['category']
        
        self.db.add_expense(user_id, amount, category, description)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
        message = f"""
‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!

üíµ –°—É–º–º–∞: {amount} —Ä—É–±.
üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description if description else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}
        """
        
        await update.message.reply_text(
            message,
            reply_markup=get_main_keyboard()
        )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()
        return ConversationHandler.END

    async def cancel(self, update: Update, context: CallbackContext):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        context.user_data.clear()
        await update.message.reply_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

    async def show_statistics_menu(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        await update.message.reply_text(
            "üìä –í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=get_statistics_keyboard()
        )

    async def show_today_stats(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        user_id = update.effective_user.id
        total = self.db.get_total_today(user_id)
        expenses = self.db.get_today_expenses(user_id)
        
        message = f"üìä **–†–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è**\n\n"
        message += f"üíµ **–û–±—â–∞—è —Å—É–º–º–∞:** {total:.2f} —Ä—É–±.\n\n"
        
        if expenses:
            message += "**–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:**\n"
            for category, amount in expenses:
                message += f"‚Ä¢ {category}: {amount:.2f} —Ä—É–±.\n"
        else:
            message += "üìù –†–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç"
        
        await update.message.reply_text(
            message,
            reply_markup=get_main_keyboard(),
            parse_mode='Markdown'
        )

    async def show_week_stats(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é"""
        user_id = update.effective_user.id
        total = self.db.get_total_week(user_id)
        expenses = self.db.get_week_expenses(user_id)
        
        message = f"üìÖ **–†–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é**\n\n"
        message += f"üíµ **–û–±—â–∞—è —Å—É–º–º–∞:** {total:.2f} —Ä—É–±.\n\n"
        
        if expenses:
            message += "**–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:**\n"
            for category, amount in expenses:
                percentage = (amount / total) * 100 if total > 0 else 0
                message += f"‚Ä¢ {category}: {amount:.2f} —Ä—É–±. ({percentage:.1f}%)\n"
        else:
            message += "üìù –†–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é –Ω–µ—Ç"
        
        await update.message.reply_text(
            message,
            reply_markup=get_main_keyboard(),
            parse_mode='Markdown'
        )

    async def show_month_stats(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –º–µ—Å—è—Ü"""
        user_id = update.effective_user.id
        total = self.db.get_total_month(user_id)
        expenses = self.db.get_month_expenses(user_id)
        
        message = f"üìà **–†–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü**\n\n"
        message += f"üíµ **–û–±—â–∞—è —Å—É–º–º–∞:** {total:.2f} —Ä—É–±.\n\n"
        
        if expenses:
            message += "**–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:**\n"
            for category, amount in expenses:
                percentage = (amount / total) * 100 if total > 0 else 0
                message += f"‚Ä¢ {category}: {amount:.2f} —Ä—É–±. ({percentage:.1f}%)\n"
        else:
            message += "üìù –†–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü –Ω–µ—Ç"
        
        await update.message.reply_text(
            message,
            reply_markup=get_main_keyboard(),
            parse_mode='Markdown'
        )

    async def show_today_detailed(self, update: Update, context: CallbackContext):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        await self.show_today_stats(update, context)

    async def show_week_detailed(self, update: Update, context: CallbackContext):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"""
        await self.show_week_stats(update, context)

    async def show_month_detailed(self, update: Update, context: CallbackContext):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü"""
        await self.show_month_stats(update, context)

    # –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–ò

    async def show_detailed_stats_menu(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        await update.message.reply_text(
            "üìã **–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
            reply_markup=get_detailed_stats_keyboard(),
            parse_mode='Markdown'
        )

    async def show_all_expenses(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑ –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        user_id = update.effective_user.id
        expenses = self.db.get_all_expenses(user_id)
        
        if not expenses:
            await update.message.reply_text(
                "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö",
                reply_markup=get_detailed_stats_keyboard()
            )
            return
        
        message = "üìã **–í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã**\n\n"
        total = 0
        
        for i, (category, amount, description, date) in enumerate(expenses, 1):
            total += amount
            #–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã —Å –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏
            try:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
                if '.' in date:
                    # –§–æ—Ä–º–∞—Ç —Å –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏: 2024-01-01 12:00:00.123456
                    date_str = datetime.strptime(date, '%Y-%m-%d %H:%M:%S.%f').strftime('%d.%m.%Y')
                else:
                    # –§–æ—Ä–º–∞—Ç –±–µ–∑ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥: 2024-01-01 12:00:00
                    date_str = datetime.strptime(date, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
            except ValueError:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –¥–∞—Ç—É
                date_str = date.split()[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏

            desc = description if description else "–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            message += f"{i}. **{category}** - {amount:.2f} —Ä—É–±.\n"
            message += f"   üìÖ {date_str} | üìù {desc}\n\n"

        message += f"üíµ **–ò—Ç–æ–≥–æ:** {total:.2f} —Ä—É–±.\n"
        message += f"üìä **–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:** {len(expenses)}"

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(message) > 4000:
            parts = [message[i:i+4000] for i in range(0, len(message), 4000)]
            for part in parts:
                await update.message.reply_text(part, parse_mode='Markdown')
        else:
            await update.message.reply_text(
                message,
                reply_markup=get_detailed_stats_keyboard(),
                parse_mode='Markdown'
            )

    async def ask_date_range(self, update: Update, context: CallbackContext):
        """–ó–∞–ø—Ä–æ—Å –ø–µ—Ä–∏–æ–¥–∞ –¥–∞—Ç"""
        await update.message.reply_text(
            "üìÖ **–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:**\n"
            "**–î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì**\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.12.2024-15.12.2024\n"
            "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–º–µ—Å—è—Ü' –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞",
            reply_markup=get_back_keyboard()
        )
        return DATE_RANGE

    async def process_date_range(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
        user_input = update.message.text.strip()
        user_id = update.effective_user.id
        
        if user_input.lower() == '–º–µ—Å—è—Ü':
            # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            today = datetime.now()
            start_date = today.replace(day=1).strftime('%Y-%m-%d')
            end_date = today.strftime('%Y-%m-%d')
            period_text = f"–∑–∞ {today.strftime('%B %Y')}"
        else:
            try:
                # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                start_str, end_str = user_input.split('-')
                start_date = datetime.strptime(start_str.strip(), '%d.%m.%Y').strftime('%Y-%m-%d')
                end_date = datetime.strptime(end_str.strip(), '%d.%m.%Y').strftime('%Y-%m-%d')
                period_text = f"—Å {start_str} –ø–æ {end_str}"
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                    reply_markup=get_back_keyboard()
                )
                return DATE_RANGE
        
        expenses = self.db.get_expenses_by_date_range(user_id, start_date, end_date)
        
        if not expenses:
            await update.message.reply_text(
                f"üìù –†–∞—Å—Ö–æ–¥–æ–≤ {period_text} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=get_detailed_stats_keyboard()
            )
            return
        
        message = f"üìÖ **–†–∞—Å—Ö–æ–¥—ã {period_text}**\n\n"
        total = 0
        
        for i, (category, amount, description, date) in enumerate(expenses, 1):
            total += amount
            date_str = datetime.strptime(date, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
            desc = description if description else "–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            message += f"{i}. **{category}** - {amount:.2f} —Ä—É–±.\n"
            message += f"   üìÖ {date_str} | üìù {desc}\n\n"
        
        message += f"üíµ **–ò—Ç–æ–≥–æ:** {total:.2f} —Ä—É–±.\n"
        message += f"üìä **–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:** {len(expenses)}"
        
        await update.message.reply_text(
            message,
            reply_markup=get_detailed_stats_keyboard(),
            parse_mode='Markdown'
        )
        return ConversationHandler.END

    async def ask_category_filter(self, update: Update, context: CallbackContext):
        """–ó–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        await update.message.reply_text(
            "üìÅ **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:**",
            reply_markup=get_categories_for_filter()
        )
        return CATEGORY_FILTER

    async def process_category_filter(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        category_input = update.message.text
        user_id = update.effective_user.id
        
        if category_input == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
            await update.message.reply_text(
                "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
                reply_markup=get_detailed_stats_keyboard()
            )
            return ConversationHandler.END
        
        if category_input == "üìã –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
            await self.show_all_expenses(update, context)
            return ConversationHandler.END
        
        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ
        clean_category = ' '.join(category_input.split()[1:]) if ' ' in category_input else category_input
        
        expenses = self.db.get_expenses_by_category(user_id, clean_category)
        
        if not expenses:
            await update.message.reply_text(
                f"üìù –†–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=get_detailed_stats_keyboard()
            )
            return
        
        message = f"üìÅ **–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_input}**\n\n"
        total = 0
        
        for i, (category, amount, description, date) in enumerate(expenses, 1):
            total += amount
            date_str = datetime.strptime(date, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
            desc = description if description else "–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            message += f"{i}. {amount:.2f} —Ä—É–±. | üìÖ {date_str}\n"
            message += f"   üìù {desc}\n\n"
        
        message += f"üíµ **–ò—Ç–æ–≥–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:** {total:.2f} —Ä—É–±.\n"
        message += f"üìä **–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:** {len(expenses)}"
        
        await update.message.reply_text(
            message,
            reply_markup=get_detailed_stats_keyboard(),
            parse_mode='Markdown'
        )
        return ConversationHandler.END

    async def show_largest_expenses(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑ —Å–∞–º—ã—Ö –∫—Ä—É–ø–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        user_id = update.effective_user.id
        expenses = self.db.get_largest_expenses(user_id)
        
        if not expenses:
            await update.message.reply_text(
                "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö",
                reply_markup=get_detailed_stats_keyboard()
            )
            return
        
        message = "üí∞ **–°–∞–º—ã–µ –∫—Ä—É–ø–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã**\n\n"
        total = 0
        
        for i, (category, amount, description, date) in enumerate(expenses, 1):
            total += amount

            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã —Å –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏
            try:
                if '.' in date:
                    date_str = datetime.strptime(date, '%Y-%m-%d %H:%M:%S.%f').strftime('%d.%m.%Y')
                else:
                    date_str = datetime.strptime(date, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
            except ValueError:
                date_str = date.split()[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏

            desc = description if description else "–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            message += f"{i}. **{category}** - {amount:.2f} —Ä—É–±.\n"
            message += f"   üìÖ {date_str} | üìù {desc}\n\n"

        message += f"üíµ **–°—É–º–º–∞ —Ç–æ–ø-{len(expenses)} —Ä–∞—Å—Ö–æ–¥–æ–≤:** {total:.2f} —Ä—É–±."

        await update.message.reply_text(
            message,
            reply_markup=get_detailed_stats_keyboard(),
            parse_mode='Markdown'
        )

    async def back_to_statistics(self, update: Update, context: CallbackContext):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        await update.message.reply_text(
            "üìä –í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=get_statistics_keyboard()
        )

    async def cancel_detailed_stats(self, update: Update, context: CallbackContext):
        """–û—Ç–º–µ–Ω–∞ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        await update.message.reply_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
            reply_markup=get_detailed_stats_keyboard()
        )
        return ConversationHandler.END

    async def show_settings(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        await update.message.reply_text(
            "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –ø–æ–¥ —Å–µ–±—è",
            reply_markup=get_settings_keyboard(),
            parse_mode='Markdown'
        )

    async def help_command(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑ –ø–æ–º–æ—â–∏"""
        help_text = """
‚ÑπÔ∏è **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ - –±—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å —Ä–∞—Å—Ö–æ–¥–∞
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ–±–∑–æ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤
‚Ä¢ üìÖ –°–µ–≥–æ–¥–Ω—è - —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ üìÜ –ù–µ–¥–µ–ª—è - —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
‚Ä¢ üìà –ú–µ—Å—è—Ü - —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
‚Ä¢ üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è - –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –ù–∞–∂–º–∏ ¬´üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥¬ª
2. –í–≤–µ–¥–∏ —Å—É–º–º—É
3. –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
4. –î–æ–±–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)

**–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:**
üçî –ï–¥–∞, üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç, üè† –î–æ–º, üëó –û–¥–µ–∂–¥–∞ –∏ –¥—Ä—É–≥–∏–µ

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏ /start
        """
        await update.message.reply_text(
            help_text,
            reply_markup=get_main_keyboard(),
            parse_mode='Markdown'
        )

    async def back_to_main(self, update: Update, context: CallbackContext):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard()
        )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        self.application.run_polling()

if __name__ == '__main__':
    bot = ExpenseBot(BOT_TOKEN)
    bot.run()